// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package otter

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "fmt"

const (
	INFO    = "info"
	SUCCESS = "success"
	WARNING = "warning"
	DANGER  = "danger"
)

type Toast struct {
	Level   string `json:"level"`
	Message string `json:"message"`
}

func newToast(level string, message string) Toast {
	return Toast{level, message}
}

func InfoToast(message string) Toast {
	return newToast(INFO, message)
}

func SuccessToast(message string) Toast {
	return newToast(SUCCESS, message)
}

func WarningToast(message string) Toast {
	return newToast(WARNING, message)
}

func DangerToast(message string) Toast {
	return newToast(DANGER, message)
}

func (t Toast) String() string {
	return fmt.Sprintf("%s: %s", t.Level, t.Message)
}

func toastListener() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_toastListener_013f`,
		Function: `function __templ_toastListener_013f(){class Toast {
		/**
		* A class representing a Toast notification.
		* @param level {("info"|"success"|"warning"|"danger")}
		* @param message { string }
		*/
		constructor(level, message) {
			this.level = level;
			this.message = message;
		}

		/**
		* Makes the toast container element. A button containing the entire notification.
		* @returns {HTMLButtonElement}
		*/
		#makeToastContainerButton() {
			const button = document.createElement("button");
			button.classList.add("toast");
			button.classList.add(` + "`" + `toast-${this.level}` + "`" + `);
			button.setAttribute("role", "alert");
			button.setAttribute("aria-label", "Close");
			button.addEventListener("click", () => button.remove());
			return button;
		}

		/**
		* Makes the element containing the body of the toast notification.
		* @returns {HTMLSpanElement}
		*/
		#makeToastContentElement() {
			const messageContainer = document.createElement("span");
			messageContainer.textContent = this.message;
			return messageContainer;
		}

		/**
		* Presents the toast notification at the end of the given container.
		* @param containerQuerySelector {string} a CSS query selector identifying the container for all toasts.
		*/
		show(containerQuerySelector = "#toast-container") {
			const toast = this.#makeToastContainerButton();
			const toastContent = this.#makeToastContentElement()
			toast.appendChild(toastContent);

			const toastContainer = document.querySelector(containerQuerySelector);
			toastContainer.appendChild(toast);
		}
	}

	document.body.addEventListener("makeToast", onMakeToast);

	/**
	* Presents a toast notification when the ` + "`" + `makeToast` + "`" + ` event is triggered
	* @param e {{detail: {level: string, message: string}}}
	*/
	function onMakeToast(e) {
		const toast = new Toast(e.detail.level, e.detail.message);
		toast.show();
	}
}`,
		Call:       templ.SafeScript(`__templ_toastListener_013f`),
		CallInline: templ.SafeScriptInline(`__templ_toastListener_013f`),
	}
}

func ToastHandler() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"toast-container\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = toastListener().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
